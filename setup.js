/**
 * TEAM CRM FOUNDATION - SETUP SCRIPT
 * 
 * Automated setup for the AI-augmented team CRM system
 * 
 * This script helps you:
 * - Configure environment variables
 * - Test API connections
 * - Validate team configuration
 * - Install dependencies
 */

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import readline from 'readline';
import { execSync } from 'child_process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

/**
 * Prompt user for input
 */
function prompt(question) {
    return new Promise(resolve => {
        rl.question(question, resolve);
    });
}

/**
 * Display setup banner
 */
function displayBanner() {
    console.log(`
╔══════════════════════════════════════════════════════════════╗
║                 TEAM CRM FOUNDATION SETUP                   ║
║              AI-Augmented Team Insights Setup               ║
╚══════════════════════════════════════════════════════════════╝

Welcome! This setup script will help you configure your team CRM system.

`);
}

/**
 * Check if file exists
 */
async function fileExists(filePath) {
    try {
        await fs.access(filePath);
        return true;
    } catch {
        return false;
    }
}

/**
 * Install dependencies
 */
async function installDependencies() {
    console.log('📦 Installing dependencies...');
    
    try {
        execSync('npm install', { stdio: 'inherit', cwd: __dirname });
        console.log('✅ Dependencies installed successfully');
        return true;
    } catch (error) {
        console.error('❌ Error installing dependencies:', error.message);
        console.log('\n💡 Try running: npm install');
        return false;
    }
}

/**
 * Setup environment variables
 */
async function setupEnvironment() {
    console.log('\n🔑 Setting up environment variables...');
    
    const envPath = path.join(__dirname, '.env');
    const envExamplePath = path.join(__dirname, '.env.example');
    
    // Check if .env already exists
    if (await fileExists(envPath)) {
        const overwrite = await prompt('⚠️  .env file already exists. Overwrite? (y/N): ');
        if (overwrite.toLowerCase() !== 'y') {
            console.log('📋 Keeping existing .env file');
            return true;
        }
    }
    
    console.log('\n📝 Please provide your API keys:');
    
    // Get OpenRouter API key
    const openrouterKey = await prompt('\n🔑 OpenRouter API Key (required): ');
    if (!openrouterKey.trim()) {
        console.log('❌ OpenRouter API key is required');
        return false;
    }
    
    // Get SuperMemory API key (optional)
    const supermemoryKey = await prompt('🧠 SuperMemory API Key (optional, press Enter to skip): ');
    
    // Create .env file
    const envContent = `# Team CRM Foundation Environment Variables
# Generated by setup script on ${new Date().toISOString()}

# Required: OpenRouter API Key for AI functionality
OPENROUTER_API_KEY=${openrouterKey}

# Optional: SuperMemory API Key for persistent memory
${supermemoryKey ? `SUPERMEMORY_API_KEY=${supermemoryKey}` : '# SUPERMEMORY_API_KEY=your_supermemory_api_key_here'}

# Server Configuration
NODE_ENV=development
PORT=8080
HOST=localhost

# SuperMemory Configuration (if using)
${supermemoryKey ? 'SUPERMEMORY_BASE_URL=https://api.supermemory.ai' : '# SUPERMEMORY_BASE_URL=https://api.supermemory.ai'}
`;
    
    try {
        await fs.writeFile(envPath, envContent);
        console.log('✅ Environment variables configured');
        return true;
    } catch (error) {
        console.error('❌ Error creating .env file:', error.message);
        return false;
    }
}

/**
 * Configure team members
 */
async function configureTeam() {
    console.log('\n👥 Team Configuration...');
    
    const configPath = path.join(__dirname, 'config', 'team-config.json');
    
    // Check if config exists
    if (await fileExists(configPath)) {
        const useExisting = await prompt('📋 team-config.json already exists. Use existing configuration? (Y/n): ');
        if (useExisting.toLowerCase() !== 'n') {
            console.log('✅ Using existing team configuration');
            return true;
        }
    }
    
    console.log('\n🔧 The default configuration includes:');
    console.log('   • Joe (Team Lead) - Project management specialist');
    console.log('   • Charlie (Technical Lead) - Development progress specialist');
    console.log('   • Josh (Business Analyst) - Revenue analysis specialist');
    console.log('   • Tre (Executive) - Receives strategic summaries');
    
    const customize = await prompt('\n🎯 Would you like to customize team member names/roles? (y/N): ');
    
    if (customize.toLowerCase() === 'y') {
        console.log('\n💡 To customize team configuration:');
        console.log('   1. Edit config/team-config.json after setup');
        console.log('   2. Modify the "team.members" section');
        console.log('   3. Update names, roles, and capabilities as needed');
        console.log('   4. Restart the system to apply changes');
    }
    
    console.log('✅ Team configuration ready');
    return true;
}

/**
 * Test API connections
 */
async function testConnections() {
    console.log('\n🔬 Testing API connections...');
    
    try {
        // Load environment variables
        const envPath = path.join(__dirname, '.env');
        const envContent = await fs.readFile(envPath, 'utf-8');
        const envVars = {};
        
        envContent.split('\n').forEach(line => {
            const [key, value] = line.split('=');
            if (key && value && !key.startsWith('#')) {
                envVars[key.trim()] = value.trim();
            }
        });
        
        // Test OpenRouter
        console.log('🤖 Testing OpenRouter API...');
        const openrouterKey = envVars.OPENROUTER_API_KEY;
        
        if (!openrouterKey) {
            console.log('❌ OpenRouter API key not found');
            return false;
        }
        
        const response = await fetch('https://openrouter.ai/api/v1/models', {
            headers: {
                'Authorization': `Bearer ${openrouterKey}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            console.log('✅ OpenRouter API connection successful');
        } else {
            console.log('❌ OpenRouter API connection failed:', response.statusText);
            return false;
        }
        
        // Test SuperMemory if configured
        const supermemoryKey = envVars.SUPERMEMORY_API_KEY;
        if (supermemoryKey) {
            console.log('🧠 Testing SuperMemory API...');
            // Note: This is a placeholder - actual SuperMemory API test would go here
            console.log('✅ SuperMemory API key configured (test endpoint not implemented)');
        } else {
            console.log('ℹ️  SuperMemory not configured (optional)');
        }
        
        return true;
        
    } catch (error) {
        console.error('❌ Error testing connections:', error.message);
        return false;
    }
}

/**
 * Display completion message
 */
function displayCompletion() {
    console.log(`
╔══════════════════════════════════════════════════════════════╗
║                        SETUP COMPLETE                       ║
╚══════════════════════════════════════════════════════════════╝

🎉 Your Team CRM Foundation is ready to use!

🚀 Quick Start:
   1. Start the server:      npm start
   2. Open chat interface:   http://localhost:8080/chat
   3. View dashboard:        http://localhost:8080/dashboard

📋 What happens next:
   • Team members submit natural language updates
   • AI personal assistants extract key information
   • Master agent generates executive summaries for Tre
   • Real-time dashboard shows insights and patterns

🔧 Customization:
   • Edit config/team-config.json to modify team setup
   • Adjust AI models and capabilities as needed
   • Configure processing intervals and memory settings

📚 Documentation:
   • README.md - Full setup and usage guide
   • API docs available at: http://localhost:8080/api/docs

💡 Need help? Check the README.md file for detailed documentation.
`);
}

/**
 * Main setup flow
 */
async function main() {
    try {
        displayBanner();
        
        // Step 1: Install dependencies
        const depsInstalled = await installDependencies();
        if (!depsInstalled) {
            console.log('\n❌ Setup failed. Please install dependencies manually and try again.');
            return;
        }
        
        // Step 2: Setup environment
        const envSetup = await setupEnvironment();
        if (!envSetup) {
            console.log('\n❌ Setup failed. Please configure environment variables manually.');
            return;
        }
        
        // Step 3: Configure team
        const teamConfigured = await configureTeam();
        if (!teamConfigured) {
            console.log('\n❌ Setup failed. Please configure team settings manually.');
            return;
        }
        
        // Step 4: Test connections
        const connectionsOk = await testConnections();
        if (!connectionsOk) {
            console.log('\n⚠️  Setup completed with warnings. Check API connections before starting.');
        }
        
        // Step 5: Display completion
        displayCompletion();
        
    } catch (error) {
        console.error('\n❌ Setup failed with error:', error.message);
        console.log('\n🔧 Try running setup again or configure manually using the README.md guide.');
    } finally {
        rl.close();
    }
}

// Run setup
main().catch(error => {
    console.error('Unhandled setup error:', error);
    rl.close();
    process.exit(1);
});